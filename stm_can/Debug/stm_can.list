
stm_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e70  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08002ff8  08002ff8  00003ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003000  08003000  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003000  08003000  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003000  08003000  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003000  08003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003008  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000e8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008352  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015b0  00000000  00000000  0000d38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0000e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066d  00000000  00000000  0000f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020486  00000000  00000000  0000f80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bd5  00000000  00000000  0002fc93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5024  00000000  00000000  00039868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe88c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002350  00000000  00000000  000fe8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00100c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fe0 	.word	0x08002fe0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002fe0 	.word	0x08002fe0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
 8000a08:	f000 fc48 	bl	800129c <HAL_Init>
  //SystemClock_Config();

  MX_GPIO_Init();
 8000a0c:	f000 faae 	bl	8000f6c <MX_GPIO_Init>
  MX_CAN2_Init();
 8000a10:	f000 fa48 	bl	8000ea4 <MX_CAN2_Init>
  //MX_ADC1_Init();
  MX_I2C1_Init();
 8000a14:	f000 fa7c 	bl	8000f10 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  BMP180_Init();
 8000a18:	f000 f8ac 	bl	8000b74 <BMP180_Init>

  CAN_Filter_Config();
 8000a1c:	f000 f9ca 	bl	8000db4 <CAN_Filter_Config>

  if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8000a20:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <main+0x68>)
 8000a22:	f000 fead 	bl	8001780 <HAL_CAN_Start>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <main+0x2c>
  {
    Error_Handler();
 8000a2c:	f000 fafe 	bl	800102c <Error_Handler>

  /* Infinite loop */
  while (1)
  {
    /* USER CODE END WHILE */
    motion = ReadMotionSensor();
 8000a30:	f000 f850 	bl	8000ad4 <ReadMotionSensor>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <main+0x6c>)
 8000a38:	6013      	str	r3, [r2, #0]
    heat = ReadHeatFlameSensor();
 8000a3a:	f000 f821 	bl	8000a80 <ReadHeatFlameSensor>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <main+0x70>)
 8000a42:	6013      	str	r3, [r2, #0]
    temperature = BMP180_GetTemperature();
 8000a44:	f000 f95e 	bl	8000d04 <BMP180_GetTemperature>
 8000a48:	eef0 7a40 	vmov.f32	s15, s0
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <main+0x74>)
 8000a4e:	edc3 7a00 	vstr	s15, [r3]
    gas =  CheckSmokeAndControlLED();
 8000a52:	f000 f869 	bl	8000b28 <CheckSmokeAndControlLED>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <main+0x78>)
 8000a5a:	6013      	str	r3, [r2, #0]


    CAN_Transmit();
 8000a5c:	f000 f9d2 	bl	8000e04 <CAN_Transmit>
    HAL_Delay(500); // Transmit every half second
 8000a60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a64:	f000 fc8c 	bl	8001380 <HAL_Delay>
    motion = ReadMotionSensor();
 8000a68:	bf00      	nop
 8000a6a:	e7e1      	b.n	8000a30 <main+0x2c>
 8000a6c:	20000028 	.word	0x20000028
 8000a70:	200000c0 	.word	0x200000c0
 8000a74:	200000c4 	.word	0x200000c4
 8000a78:	200000bc 	.word	0x200000bc
 8000a7c:	200000c8 	.word	0x200000c8

08000a80 <ReadHeatFlameSensor>:



/* Reading Heat/Flame Sensor */
int ReadHeatFlameSensor(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
    int mess = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	480f      	ldr	r0, [pc, #60]	@ (8000acc <ReadHeatFlameSensor+0x4c>)
 8000a8e:	f001 fa0d 	bl	8001eac <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d108      	bne.n	8000aaa <ReadHeatFlameSensor+0x2a>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a9e:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <ReadHeatFlameSensor+0x50>)
 8000aa0:	f001 fa1c 	bl	8001edc <HAL_GPIO_WritePin>
        mess = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	e007      	b.n	8000aba <ReadHeatFlameSensor+0x3a>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab0:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <ReadHeatFlameSensor+0x50>)
 8000ab2:	f001 fa13 	bl	8001edc <HAL_GPIO_WritePin>
        mess = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
    }

    HAL_Delay(100);
 8000aba:	2064      	movs	r0, #100	@ 0x64
 8000abc:	f000 fc60 	bl	8001380 <HAL_Delay>
    return mess;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <ReadMotionSensor>:



/* Reading Motion Sensor */
int ReadMotionSensor(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
    int state = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1)
 8000ade:	2102      	movs	r1, #2
 8000ae0:	480f      	ldr	r0, [pc, #60]	@ (8000b20 <ReadMotionSensor+0x4c>)
 8000ae2:	f001 f9e3 	bl	8001eac <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d108      	bne.n	8000afe <ReadMotionSensor+0x2a>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af2:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <ReadMotionSensor+0x50>)
 8000af4:	f001 f9f2 	bl	8001edc <HAL_GPIO_WritePin>
        state = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	e007      	b.n	8000b0e <ReadMotionSensor+0x3a>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <ReadMotionSensor+0x50>)
 8000b06:	f001 f9e9 	bl	8001edc <HAL_GPIO_WritePin>
        state = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
    }

    HAL_Delay(100);
 8000b0e:	2064      	movs	r0, #100	@ 0x64
 8000b10:	f000 fc36 	bl	8001380 <HAL_Delay>
    return state;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <CheckSmokeAndControlLED>:




int CheckSmokeAndControlLED(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
    int smokeDetected = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]

    // Read the state of the D0 pin
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)  // Replace GPIO_PIN_0 with the correct pin number for D0
 8000b32:	2104      	movs	r1, #4
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <CheckSmokeAndControlLED+0x44>)
 8000b36:	f001 f9b9 	bl	8001eac <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d108      	bne.n	8000b52 <CheckSmokeAndControlLED+0x2a>
    {
        // Smoke detected (D0 pin is HIGH)
        smokeDetected = 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);  // Turn on LED for indication (optional)
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b4a:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <CheckSmokeAndControlLED+0x48>)
 8000b4c:	f001 f9c6 	bl	8001edc <HAL_GPIO_WritePin>
 8000b50:	e007      	b.n	8000b62 <CheckSmokeAndControlLED+0x3a>
    }
    else
    {
        // No smoke detected (D0 pin is LOW)
        smokeDetected = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);  // Turn off LED (optional)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <CheckSmokeAndControlLED+0x48>)
 8000b5e:	f001 f9bd 	bl	8001edc <HAL_GPIO_WritePin>
    }

    return smokeDetected;
 8000b62:	687b      	ldr	r3, [r7, #4]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <BMP180_Init>:

/* BMP180 Initialization */
void BMP180_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  BMP180_ReadCalibrationData();
 8000b78:	f000 f802 	bl	8000b80 <BMP180_ReadCalibrationData>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <BMP180_ReadCalibrationData>:

/* Reading Calibration Data */
void BMP180_ReadCalibrationData(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af04      	add	r7, sp, #16
  uint8_t data[22];
  HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_CAL_AC1, I2C_MEMADD_SIZE_8BIT, data, 22, HAL_MAX_DELAY);
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2316      	movs	r3, #22
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	463b      	mov	r3, r7
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	22aa      	movs	r2, #170	@ 0xaa
 8000b98:	21ee      	movs	r1, #238	@ 0xee
 8000b9a:	4836      	ldr	r0, [pc, #216]	@ (8000c74 <BMP180_ReadCalibrationData+0xf4>)
 8000b9c:	f001 fbf6 	bl	800238c <HAL_I2C_Mem_Read>

  AC1 = (data[0] << 8) | data[1];
 8000ba0:	783b      	ldrb	r3, [r7, #0]
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	b21a      	sxth	r2, r3
 8000ba6:	787b      	ldrb	r3, [r7, #1]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	4b32      	ldr	r3, [pc, #200]	@ (8000c78 <BMP180_ReadCalibrationData+0xf8>)
 8000bb0:	801a      	strh	r2, [r3, #0]
  AC2 = (data[2] << 8) | data[3];
 8000bb2:	78bb      	ldrb	r3, [r7, #2]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <BMP180_ReadCalibrationData+0xfc>)
 8000bc2:	801a      	strh	r2, [r3, #0]
  AC3 = (data[4] << 8) | data[5];
 8000bc4:	793b      	ldrb	r3, [r7, #4]
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	797b      	ldrb	r3, [r7, #5]
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c80 <BMP180_ReadCalibrationData+0x100>)
 8000bd4:	801a      	strh	r2, [r3, #0]
  AC4 = (data[6] << 8) | data[7];
 8000bd6:	79bb      	ldrb	r3, [r7, #6]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <BMP180_ReadCalibrationData+0x104>)
 8000be8:	801a      	strh	r2, [r3, #0]
  AC5 = (data[8] << 8) | data[9];
 8000bea:	7a3b      	ldrb	r3, [r7, #8]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	7a7b      	ldrb	r3, [r7, #9]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <BMP180_ReadCalibrationData+0x108>)
 8000bfc:	801a      	strh	r2, [r3, #0]
  AC6 = (data[10] << 8) | data[11];
 8000bfe:	7abb      	ldrb	r3, [r7, #10]
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	7afb      	ldrb	r3, [r7, #11]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <BMP180_ReadCalibrationData+0x10c>)
 8000c10:	801a      	strh	r2, [r3, #0]
  B1  = (data[12] << 8) | data[13];
 8000c12:	7b3b      	ldrb	r3, [r7, #12]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	7b7b      	ldrb	r3, [r7, #13]
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <BMP180_ReadCalibrationData+0x110>)
 8000c22:	801a      	strh	r2, [r3, #0]
  B2  = (data[14] << 8) | data[15];
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <BMP180_ReadCalibrationData+0x114>)
 8000c34:	801a      	strh	r2, [r3, #0]
  MB  = (data[16] << 8) | data[17];
 8000c36:	7c3b      	ldrb	r3, [r7, #16]
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	7c7b      	ldrb	r3, [r7, #17]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <BMP180_ReadCalibrationData+0x118>)
 8000c46:	801a      	strh	r2, [r3, #0]
  MC  = (data[18] << 8) | data[19];
 8000c48:	7cbb      	ldrb	r3, [r7, #18]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	7cfb      	ldrb	r3, [r7, #19]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <BMP180_ReadCalibrationData+0x11c>)
 8000c58:	801a      	strh	r2, [r3, #0]
  MD  = (data[20] << 8) | data[21];
 8000c5a:	7d3b      	ldrb	r3, [r7, #20]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	7d7b      	ldrb	r3, [r7, #21]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <BMP180_ReadCalibrationData+0x120>)
 8000c6a:	801a      	strh	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000050 	.word	0x20000050
 8000c78:	200000a4 	.word	0x200000a4
 8000c7c:	200000a6 	.word	0x200000a6
 8000c80:	200000a8 	.word	0x200000a8
 8000c84:	200000b4 	.word	0x200000b4
 8000c88:	200000b6 	.word	0x200000b6
 8000c8c:	200000b8 	.word	0x200000b8
 8000c90:	200000aa 	.word	0x200000aa
 8000c94:	200000ac 	.word	0x200000ac
 8000c98:	200000ae 	.word	0x200000ae
 8000c9c:	200000b0 	.word	0x200000b0
 8000ca0:	200000b2 	.word	0x200000b2

08000ca4 <BMP180_ReadRawTemperature>:

/* Reading Raw Temperature from BMP180 */
int16_t BMP180_ReadRawTemperature(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af04      	add	r7, sp, #16
  uint8_t cmd = BMP180_CMD_TEMP;
 8000caa:	232e      	movs	r3, #46	@ 0x2e
 8000cac:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, BMP180_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY);
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	22f4      	movs	r2, #244	@ 0xf4
 8000cc0:	21ee      	movs	r1, #238	@ 0xee
 8000cc2:	480f      	ldr	r0, [pc, #60]	@ (8000d00 <BMP180_ReadRawTemperature+0x5c>)
 8000cc4:	f001 fa68 	bl	8002198 <HAL_I2C_Mem_Write>
  HAL_Delay(5);
 8000cc8:	2005      	movs	r0, #5
 8000cca:	f000 fb59 	bl	8001380 <HAL_Delay>

  uint8_t data[2];
  HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, BMP180_REG_RESULT, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	22f6      	movs	r2, #246	@ 0xf6
 8000ce0:	21ee      	movs	r1, #238	@ 0xee
 8000ce2:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <BMP180_ReadRawTemperature+0x5c>)
 8000ce4:	f001 fb52 	bl	800238c <HAL_I2C_Mem_Read>
  return (data[0] << 8) | data[1];
 8000ce8:	793b      	ldrb	r3, [r7, #4]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	797b      	ldrb	r3, [r7, #5]
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21b      	sxth	r3, r3
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000050 	.word	0x20000050

08000d04 <BMP180_GetTemperature>:

/* Getting Temperature from BMP180 */
float BMP180_GetTemperature(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
  int32_t UT = BMP180_ReadRawTemperature();
 8000d0a:	f7ff ffcb 	bl	8000ca4 <BMP180_ReadRawTemperature>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	617b      	str	r3, [r7, #20]

  int32_t X1 = (UT - AC6) * AC5 / (1 << 15);
 8000d12:	4b22      	ldr	r3, [pc, #136]	@ (8000d9c <BMP180_GetTemperature+0x98>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	4a20      	ldr	r2, [pc, #128]	@ (8000da0 <BMP180_GetTemperature+0x9c>)
 8000d1e:	8812      	ldrh	r2, [r2, #0]
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	da02      	bge.n	8000d2e <BMP180_GetTemperature+0x2a>
 8000d28:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000d2c:	337f      	adds	r3, #127	@ 0x7f
 8000d2e:	13db      	asrs	r3, r3, #15
 8000d30:	613b      	str	r3, [r7, #16]
  int32_t X2 = (MC * (1 << 11)) / (X1 + MD);
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <BMP180_GetTemperature+0xa0>)
 8000d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d38:	02da      	lsls	r2, r3, #11
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <BMP180_GetTemperature+0xa4>)
 8000d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d40:	4619      	mov	r1, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	440b      	add	r3, r1
 8000d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4a:	60fb      	str	r3, [r7, #12]
  int32_t B5 = X1 + X2;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  float temperature = (B5 + 8) / 16.0 / 10.0;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3308      	adds	r3, #8
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb87 	bl	800046c <__aeabi_i2d>
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <BMP180_GetTemperature+0xa8>)
 8000d64:	f7ff fd16 	bl	8000794 <__aeabi_ddiv>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <BMP180_GetTemperature+0xac>)
 8000d76:	f7ff fd0d 	bl	8000794 <__aeabi_ddiv>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff fdef 	bl	8000964 <__aeabi_d2f>
 8000d86:	4603      	mov	r3, r0
 8000d88:	607b      	str	r3, [r7, #4]

  return temperature;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	ee07 3a90 	vmov	s15, r3
}
 8000d90:	eeb0 0a67 	vmov.f32	s0, s15
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000b8 	.word	0x200000b8
 8000da0:	200000b6 	.word	0x200000b6
 8000da4:	200000b0 	.word	0x200000b0
 8000da8:	200000b2 	.word	0x200000b2
 8000dac:	40300000 	.word	0x40300000
 8000db0:	40240000 	.word	0x40240000

08000db4 <CAN_Filter_Config>:

/* CAN Filter Configuration */
void CAN_Filter_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  canfilterconfig.SlaveStartFilterBank = 14;
 8000dde:	230e      	movs	r3, #14
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24

  if(HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <CAN_Filter_Config+0x4c>)
 8000de8:	f000 fbea 	bl	80015c0 <HAL_CAN_ConfigFilter>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <CAN_Filter_Config+0x42>
  {
    Error_Handler();
 8000df2:	f000 f91b 	bl	800102c <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	@ 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000028 	.word	0x20000028

08000e04 <CAN_Transmit>:

/* Transmit CAN Message */
void CAN_Transmit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  // Transmitting Temperature Data
  TxHeader.StdId = 0x65D;
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <CAN_Transmit+0x80>)
 8000e0c:	f240 625d 	movw	r2, #1629	@ 0x65d
 8000e10:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <CAN_Transmit+0x80>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <CAN_Transmit+0x80>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <CAN_Transmit+0x80>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 5;
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <CAN_Transmit+0x80>)
 8000e26:	2205      	movs	r2, #5
 8000e28:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <CAN_Transmit+0x80>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	751a      	strb	r2, [r3, #20]

  // Packing the data
  TxData[0] = (uint8_t)temperature;
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <CAN_Transmit+0x84>)
 8000e32:	edd3 7a00 	vldr	s15, [r3]
 8000e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e3e:	793b      	ldrb	r3, [r7, #4]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <CAN_Transmit+0x88>)
 8000e44:	701a      	strb	r2, [r3, #0]
 // TxData[1] = (uint8_t)(temperature * 100) % 100; // Two decimal precision
  TxData[1] = motion;
 8000e46:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <CAN_Transmit+0x8c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <CAN_Transmit+0x88>)
 8000e4e:	705a      	strb	r2, [r3, #1]
  TxData[2] = heat;
 8000e50:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <CAN_Transmit+0x90>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <CAN_Transmit+0x88>)
 8000e58:	709a      	strb	r2, [r3, #2]
  TxData[3] = gas;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <CAN_Transmit+0x94>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <CAN_Transmit+0x88>)
 8000e62:	70da      	strb	r2, [r3, #3]



  if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <CAN_Transmit+0x98>)
 8000e66:	4a09      	ldr	r2, [pc, #36]	@ (8000e8c <CAN_Transmit+0x88>)
 8000e68:	4906      	ldr	r1, [pc, #24]	@ (8000e84 <CAN_Transmit+0x80>)
 8000e6a:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <CAN_Transmit+0x9c>)
 8000e6c:	f000 fccc 	bl	8001808 <HAL_CAN_AddTxMessage>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <CAN_Transmit+0x76>
  {
    Error_Handler();
 8000e76:	f000 f8d9 	bl	800102c <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000cc 	.word	0x200000cc
 8000e88:	200000bc 	.word	0x200000bc
 8000e8c:	200000e4 	.word	0x200000e4
 8000e90:	200000c0 	.word	0x200000c0
 8000e94:	200000c4 	.word	0x200000c4
 8000e98:	200000c8 	.word	0x200000c8
 8000e9c:	200000ec 	.word	0x200000ec
 8000ea0:	20000028 	.word	0x20000028

08000ea4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	@ (8000f0c <MX_CAN2_Init+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000ec2:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000ec6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000eca:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ece:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <MX_CAN2_Init+0x64>)
 8000ef6:	f000 fa67 	bl	80013c8 <HAL_CAN_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f00:	f000 f894 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000028 	.word	0x20000028
 8000f0c:	40006800 	.word	0x40006800

08000f10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f16:	4a13      	ldr	r2, [pc, #76]	@ (8000f64 <MX_I2C1_Init+0x54>)
 8000f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f1c:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <MX_I2C1_Init+0x58>)
 8000f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f4e:	f000 ffdf 	bl	8001f10 <HAL_I2C_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f58:	f000 f868 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000050 	.word	0x20000050
 8000f64:	40005400 	.word	0x40005400
 8000f68:	000186a0 	.word	0x000186a0

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_GPIO_Init+0xb4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000fdc:	4811      	ldr	r0, [pc, #68]	@ (8001024 <MX_GPIO_Init+0xb8>)
 8000fde:	f000 ff7d 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <MX_GPIO_Init+0xbc>)
 8000ff6:	f000 fdbd 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000ffa:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	4804      	ldr	r0, [pc, #16]	@ (8001024 <MX_GPIO_Init+0xb8>)
 8001014:	f000 fdae 	bl	8001b74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40020000 	.word	0x40020000

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	4a0f      	ldr	r2, [pc, #60]	@ (8001084 <HAL_MspInit+0x4c>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104c:	6453      	str	r3, [r2, #68]	@ 0x44
 800104e:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <HAL_MspInit+0x4c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	@ 0x40
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001076:	2007      	movs	r0, #7
 8001078:	f000 fd48 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800

08001088 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a20      	ldr	r2, [pc, #128]	@ (8001128 <HAL_CAN_MspInit+0xa0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d13a      	bne.n	8001120 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	4a1e      	ldr	r2, [pc, #120]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_CAN_MspInit+0xa4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010fe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001110:	2309      	movs	r3, #9
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_CAN_MspInit+0xa8>)
 800111c:	f000 fd2a 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	@ 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40006800 	.word	0x40006800
 800112c:	40023800 	.word	0x40023800
 8001130:	40020400 	.word	0x40020400

08001134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_I2C_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12b      	bne.n	80011ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001172:	23c0      	movs	r3, #192	@ 0xc0
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001182:	2304      	movs	r3, #4
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <HAL_I2C_MspInit+0x8c>)
 800118e:	f000 fcf1 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800119c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	@ 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 f891 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001280 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800124c:	f7ff ffea 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	@ (8001288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	@ (8001294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f001 fe8f 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff fbc3 	bl	8000a04 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800128c:	08003008 	.word	0x08003008
  ldr r2, =_sbss
 8001290:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001294:	200000f4 	.word	0x200000f4

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 fc21 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff feb2 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fc2b 	bl	8001b5a <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800131c:	f000 fc01 	bl	8001b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	@ (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	200000f0 	.word	0x200000f0

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200000f0 	.word	0x200000f0

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0ed      	b.n	80015b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fe4e 	bl	8001088 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fc:	f7ff ffb4 	bl	8001368 <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001402:	e012      	b.n	800142a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001404:	f7ff ffb0 	bl	8001368 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b0a      	cmp	r3, #10
 8001410:	d90b      	bls.n	800142a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001416:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2205      	movs	r2, #5
 8001422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0c5      	b.n	80015b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0e5      	beq.n	8001404 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0202 	bic.w	r2, r2, #2
 8001446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001448:	f7ff ff8e 	bl	8001368 <HAL_GetTick>
 800144c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800144e:	e012      	b.n	8001476 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001450:	f7ff ff8a 	bl	8001368 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b0a      	cmp	r3, #10
 800145c:	d90b      	bls.n	8001476 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2205      	movs	r2, #5
 800146e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e09f      	b.n	80015b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e5      	bne.n	8001450 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7e1b      	ldrb	r3, [r3, #24]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e007      	b.n	80014ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7e5b      	ldrb	r3, [r3, #25]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e007      	b.n	80014d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7e9b      	ldrb	r3, [r3, #26]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d108      	bne.n	80014f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e007      	b.n	8001502 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0220 	bic.w	r2, r2, #32
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7edb      	ldrb	r3, [r3, #27]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0210 	bic.w	r2, r2, #16
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e007      	b.n	800152c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0210 	orr.w	r2, r2, #16
 800152a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7f1b      	ldrb	r3, [r3, #28]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0208 	orr.w	r2, r2, #8
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e007      	b.n	8001556 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0208 	bic.w	r2, r2, #8
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7f5b      	ldrb	r3, [r3, #29]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0204 	orr.w	r2, r2, #4
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e007      	b.n	8001580 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0204 	bic.w	r2, r2, #4
 800157e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	ea42 0103 	orr.w	r1, r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015d8:	7cfb      	ldrb	r3, [r7, #19]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d003      	beq.n	80015e6 <HAL_CAN_ConfigFilter+0x26>
 80015de:	7cfb      	ldrb	r3, [r7, #19]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	f040 80be 	bne.w	8001762 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015e6:	4b65      	ldr	r3, [pc, #404]	@ (800177c <HAL_CAN_ConfigFilter+0x1bc>)
 80015e8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001600:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	431a      	orrs	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2201      	movs	r2, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	401a      	ands	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d123      	bne.n	8001690 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800166a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3248      	adds	r2, #72	@ 0x48
 8001670:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001684:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001686:	6979      	ldr	r1, [r7, #20]
 8001688:	3348      	adds	r3, #72	@ 0x48
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d122      	bne.n	80016de <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3248      	adds	r2, #72	@ 0x48
 80016be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016d4:	6979      	ldr	r1, [r7, #20]
 80016d6:	3348      	adds	r3, #72	@ 0x48
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	401a      	ands	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80016f8:	e007      	b.n	800170a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	431a      	orrs	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	401a      	ands	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001724:	e007      	b.n	8001736 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	431a      	orrs	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d107      	bne.n	800174e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001754:	f023 0201 	bic.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e006      	b.n	8001770 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001766:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
  }
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40006400 	.word	0x40006400

08001780 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d12e      	bne.n	80017f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff fddc 	bl	8001368 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017b2:	e012      	b.n	80017da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017b4:	f7ff fdd8 	bl	8001368 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b0a      	cmp	r3, #10
 80017c0:	d90b      	bls.n	80017da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2205      	movs	r2, #5
 80017d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e012      	b.n	8001800 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e5      	bne.n	80017b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e006      	b.n	8001800 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
  }
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d003      	beq.n	8001834 <HAL_CAN_AddTxMessage+0x2c>
 800182c:	7ffb      	ldrb	r3, [r7, #31]
 800182e:	2b02      	cmp	r3, #2
 8001830:	f040 80ad 	bne.w	800198e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10a      	bne.n	8001854 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8095 	beq.w	800197e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	0e1b      	lsrs	r3, r3, #24
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10d      	bne.n	800188c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800187a:	68f9      	ldr	r1, [r7, #12]
 800187c:	6809      	ldr	r1, [r1, #0]
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3318      	adds	r3, #24
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	440b      	add	r3, r1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e00f      	b.n	80018ac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001896:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800189c:	68f9      	ldr	r1, [r7, #12]
 800189e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80018a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3318      	adds	r3, #24
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	440b      	add	r3, r1
 80018aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3318      	adds	r3, #24
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	3304      	adds	r3, #4
 80018be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	7d1b      	ldrb	r3, [r3, #20]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d111      	bne.n	80018ec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3318      	adds	r3, #24
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	3304      	adds	r3, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3318      	adds	r3, #24
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	440b      	add	r3, r1
 80018e8:	3304      	adds	r3, #4
 80018ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3307      	adds	r3, #7
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	061a      	lsls	r2, r3, #24
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3306      	adds	r3, #6
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3305      	adds	r3, #5
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	4313      	orrs	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	3204      	adds	r2, #4
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	4610      	mov	r0, r2
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	6811      	ldr	r1, [r2, #0]
 8001914:	ea43 0200 	orr.w	r2, r3, r0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	440b      	add	r3, r1
 800191e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001922:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3303      	adds	r3, #3
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	061a      	lsls	r2, r3, #24
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3302      	adds	r3, #2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3301      	adds	r3, #1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	4313      	orrs	r3, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	7812      	ldrb	r2, [r2, #0]
 8001944:	4610      	mov	r0, r2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	6811      	ldr	r1, [r2, #0]
 800194a:	ea43 0200 	orr.w	r2, r3, r0
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	440b      	add	r3, r1
 8001954:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001958:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3318      	adds	r3, #24
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	6811      	ldr	r1, [r2, #0]
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3318      	adds	r3, #24
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	440b      	add	r3, r1
 8001978:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e00e      	b.n	800199c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e006      	b.n	800199c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
  }
}
 800199c:	4618      	mov	r0, r3
 800199e:	3724      	adds	r7, #36	@ 0x24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	@ (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aec:	f7ff ff8e 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff47 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff5c 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff8e 	bl	8001a60 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5d 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffb0 	bl	8001ac8 <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e16b      	b.n	8001e68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 815a 	bne.w	8001e62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d130      	bne.n	8001c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d017      	beq.n	8001c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80b4 	beq.w	8001e62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b60      	ldr	r3, [pc, #384]	@ (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a5f      	ldr	r2, [pc, #380]	@ (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d16:	4a5b      	ldr	r2, [pc, #364]	@ (8001e84 <HAL_GPIO_Init+0x310>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	@ (8001e88 <HAL_GPIO_Init+0x314>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d02b      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a51      	ldr	r2, [pc, #324]	@ (8001e8c <HAL_GPIO_Init+0x318>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d025      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a50      	ldr	r2, [pc, #320]	@ (8001e90 <HAL_GPIO_Init+0x31c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4f      	ldr	r2, [pc, #316]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x216>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4d      	ldr	r2, [pc, #308]	@ (8001e9c <HAL_GPIO_Init+0x328>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea0 <HAL_GPIO_Init+0x32c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x20a>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00e      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d7e:	2308      	movs	r3, #8
 8001d80:	e00c      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d82:	2306      	movs	r3, #6
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	4935      	ldr	r1, [pc, #212]	@ (8001e84 <HAL_GPIO_Init+0x310>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dde:	4a32      	ldr	r2, [pc, #200]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de4:	4b30      	ldr	r3, [pc, #192]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e08:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	f67f ae90 	bls.w	8001b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	@ 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40021400 	.word	0x40021400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40021c00 	.word	0x40021c00
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e001      	b.n	8001ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e12b      	b.n	800217a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff f8fc 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	@ 0x24
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f74:	f000 fffc 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8001f78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a81      	ldr	r2, [pc, #516]	@ (8002184 <HAL_I2C_Init+0x274>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d807      	bhi.n	8001f94 <HAL_I2C_Init+0x84>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a80      	ldr	r2, [pc, #512]	@ (8002188 <HAL_I2C_Init+0x278>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e006      	b.n	8001fa2 <HAL_I2C_Init+0x92>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a7d      	ldr	r2, [pc, #500]	@ (800218c <HAL_I2C_Init+0x27c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0e7      	b.n	800217a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a78      	ldr	r2, [pc, #480]	@ (8002190 <HAL_I2C_Init+0x280>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0c9b      	lsrs	r3, r3, #18
 8001fb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <HAL_I2C_Init+0x274>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_I2C_Init+0xd4>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	e009      	b.n	8001ff8 <HAL_I2C_Init+0xe8>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	4a69      	ldr	r2, [pc, #420]	@ (8002194 <HAL_I2C_Init+0x284>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800200a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	495c      	ldr	r1, [pc, #368]	@ (8002184 <HAL_I2C_Init+0x274>)
 8002014:	428b      	cmp	r3, r1
 8002016:	d819      	bhi.n	800204c <HAL_I2C_Init+0x13c>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e59      	subs	r1, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fbb1 f3f3 	udiv	r3, r1, r3
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800202c:	400b      	ands	r3, r1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_I2C_Init+0x138>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e59      	subs	r1, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	e051      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 8002048:	2304      	movs	r3, #4
 800204a:	e04f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d111      	bne.n	8002078 <HAL_I2C_Init+0x168>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e012      	b.n	800209e <HAL_I2C_Init+0x18e>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Init+0x196>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e022      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <HAL_I2C_Init+0x1bc>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e58      	subs	r0, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ca:	e00f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	6809      	ldr	r1, [r1, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800211a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6911      	ldr	r1, [r2, #16]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68d2      	ldr	r2, [r2, #12]
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	430b      	orrs	r3, r1
 800212e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	000186a0 	.word	0x000186a0
 8002188:	001e847f 	.word	0x001e847f
 800218c:	003d08ff 	.word	0x003d08ff
 8002190:	431bde83 	.word	0x431bde83
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	817b      	strh	r3, [r7, #10]
 80021aa:	460b      	mov	r3, r1
 80021ac:	813b      	strh	r3, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b2:	f7ff f8d9 	bl	8001368 <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 80d9 	bne.w	8002378 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2319      	movs	r3, #25
 80021cc:	2201      	movs	r2, #1
 80021ce:	496d      	ldr	r1, [pc, #436]	@ (8002384 <HAL_I2C_Mem_Write+0x1ec>)
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fc8b 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	e0cc      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Mem_Write+0x56>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0c5      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d007      	beq.n	8002214 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2221      	movs	r2, #33	@ 0x21
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002244:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a4d      	ldr	r2, [pc, #308]	@ (8002388 <HAL_I2C_Mem_Write+0x1f0>)
 8002254:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002256:	88f8      	ldrh	r0, [r7, #6]
 8002258:	893a      	ldrh	r2, [r7, #8]
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4603      	mov	r3, r0
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fac2 	bl	80027f0 <I2C_RequestMemoryWrite>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d052      	beq.n	8002318 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e081      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fd50 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d107      	bne.n	800229e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06b      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11b      	bne.n	8002318 <HAL_I2C_Mem_Write+0x180>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1aa      	bne.n	8002276 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fd43 	bl	8002db0 <I2C_WaitOnBTFFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b04      	cmp	r3, #4
 8002336:	d107      	bne.n	8002348 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002346:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e016      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	00100002 	.word	0x00100002
 8002388:	ffff0000 	.word	0xffff0000

0800238c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08c      	sub	sp, #48	@ 0x30
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a6:	f7fe ffdf 	bl	8001368 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	f040 8214 	bne.w	80027e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2319      	movs	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	497b      	ldr	r1, [pc, #492]	@ (80025b0 <HAL_I2C_Mem_Read+0x224>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fb91 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	e207      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_I2C_Mem_Read+0x56>
 80023de:	2302      	movs	r3, #2
 80023e0:	e200      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d007      	beq.n	8002408 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2222      	movs	r2, #34	@ 0x22
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2240      	movs	r2, #64	@ 0x40
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a5b      	ldr	r2, [pc, #364]	@ (80025b4 <HAL_I2C_Mem_Read+0x228>)
 8002448:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800244a:	88f8      	ldrh	r0, [r7, #6]
 800244c:	893a      	ldrh	r2, [r7, #8]
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa5e 	bl	800291c <I2C_RequestMemoryRead>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1bc      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d113      	bne.n	800249a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e190      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d11b      	bne.n	80024da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e170      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d11b      	bne.n	800251a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	e150      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002530:	e144      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 80f1 	bhi.w	800271e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	2b01      	cmp	r3, #1
 8002542:	d123      	bne.n	800258c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002546:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fc79 	bl	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e145      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800258a:	e117      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	2b02      	cmp	r3, #2
 8002592:	d14e      	bne.n	8002632 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259a:	2200      	movs	r2, #0
 800259c:	4906      	ldr	r1, [pc, #24]	@ (80025b8 <HAL_I2C_Mem_Read+0x22c>)
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 faa4 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e11a      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
 80025ae:	bf00      	nop
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000
 80025b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002630:	e0c4      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002638:	2200      	movs	r2, #0
 800263a:	496c      	ldr	r1, [pc, #432]	@ (80027ec <HAL_I2C_Mem_Read+0x460>)
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fa55 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0cb      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002694:	2200      	movs	r2, #0
 8002696:	4955      	ldr	r1, [pc, #340]	@ (80027ec <HAL_I2C_Mem_Read+0x460>)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fa27 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e09d      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800271c:	e04e      	b.n	80027bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002720:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fb8c 	bl	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e058      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d124      	bne.n	80027bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	2b03      	cmp	r3, #3
 8002778:	d107      	bne.n	800278a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002788:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f aeb6 	bne.w	8002532 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3728      	adds	r7, #40	@ 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	00010004 	.word	0x00010004

080027f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002818:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	2200      	movs	r2, #0
 8002822:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f960 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002840:	d103      	bne.n	800284a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e05f      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800285c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	6a3a      	ldr	r2, [r7, #32]
 8002862:	492d      	ldr	r1, [pc, #180]	@ (8002918 <I2C_RequestMemoryWrite+0x128>)
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f9bb 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e04c      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa46 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e02b      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	e021      	b.n	800290c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fa20 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d107      	bne.n	80028fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e005      	b.n	800290e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002902:	893b      	ldrh	r3, [r7, #8]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	00010002 	.word	0x00010002

0800291c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	460b      	mov	r3, r1
 8002930:	813b      	strh	r3, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002944:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2200      	movs	r2, #0
 800295e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f8c2 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800297c:	d103      	bne.n	8002986 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e0aa      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002998:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	4952      	ldr	r1, [pc, #328]	@ (8002ae8 <I2C_RequestMemoryRead+0x1cc>)
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f91d 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e097      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9a8 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d107      	bne.n	80029ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e076      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f8:	893b      	ldrh	r3, [r7, #8]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	e021      	b.n	8002a48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a04:	893b      	ldrh	r3, [r7, #8]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f982 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d107      	bne.n	8002a3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e050      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4a:	6a39      	ldr	r1, [r7, #32]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f967 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d107      	bne.n	8002a70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e035      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f82b 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aaa:	d103      	bne.n	8002ab4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e013      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ab8:	897b      	ldrh	r3, [r7, #10]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	6a3a      	ldr	r2, [r7, #32]
 8002acc:	4906      	ldr	r1, [pc, #24]	@ (8002ae8 <I2C_RequestMemoryRead+0x1cc>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f886 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e048      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b04:	d044      	beq.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe fc2f 	bl	8001368 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d139      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	e00c      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e023      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10d      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	e00c      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d093      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	e071      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfe:	d123      	bne.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e067      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c4e:	d041      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c50:	f7fe fb8a 	bl	8001368 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d136      	bne.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10c      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e00b      	b.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e021      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10c      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af6d 	bne.w	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	e034      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8e3 	bl	8002efa <I2C_IsAcknowledgeFailed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d44:	d028      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe fb0f 	bl	8001368 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b80      	cmp	r3, #128	@ 0x80
 8002d68:	d016      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da2:	2b80      	cmp	r3, #128	@ 0x80
 8002da4:	d1c3      	bne.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f89b 	bl	8002efa <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd4:	d028      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe fac7 	bl	8001368 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11d      	bne.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d016      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1c3      	bne.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e4c:	e049      	b.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d119      	bne.n	8002e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0210 	mvn.w	r2, #16
 8002e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e030      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e90:	f7fe fa6a 	bl	8001368 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d302      	bcc.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11d      	bne.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb0:	2b40      	cmp	r3, #64	@ 0x40
 8002eb2:	d016      	beq.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e007      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d1ae      	bne.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f10:	d11b      	bne.n	8002f4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000000 	.word	0x20000000

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f74:	f7ff fff0 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4903      	ldr	r1, [pc, #12]	@ (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08002ff8 	.word	0x08002ff8

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002fd0 <__libc_init_array+0x38>)
 8002f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8002fd4 <__libc_init_array+0x3c>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8002fd8 <__libc_init_array+0x40>)
 8002faa:	4c0c      	ldr	r4, [pc, #48]	@ (8002fdc <__libc_init_array+0x44>)
 8002fac:	f000 f818 	bl	8002fe0 <_init>
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	08003000 	.word	0x08003000
 8002fd4:	08003000 	.word	0x08003000
 8002fd8:	08003000 	.word	0x08003000
 8002fdc:	08003004 	.word	0x08003004

08002fe0 <_init>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	bf00      	nop
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr

08002fec <_fini>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr
